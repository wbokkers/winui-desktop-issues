//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0+ge1fa92580f
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile testlottie.json
//       
//       Input file:
//           testlottie.json (5825 bytes created 11:32+02:00 May 3 2017)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    66 |
// |--------------------------+-------|
// | Expression animators     |     8 |
// | KeyFrame animators       |     8 |
// | Reference parameters     |     8 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     3 |
// |--------------------------+-------|
// | ContainerShapes          |     4 |
// | CompositionSpriteShapes  |     4 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        Le Rectangle
    // Frame rate:  60 fps
    // Frame count: 240
    // Duration:    4000.0 mS
    sealed class Testlottie
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 4.000 seconds.
        internal const long c_durationTicks = 40000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            return
                new Testlottie_AnimatedVisual(
                    compositor
                    );
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 240d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 240d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Testlottie_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 40000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _opacityScalarAnimation_1_to_0;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _scaleVector2Animation;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(12F, 1F));
                    builder.AddLine(new Vector2(-12F, 1F));
                    builder.AddLine(new Vector2(-12F, -1F));
                    builder.AddLine(new Vector2(12F, -1F));
                    builder.AddLine(new Vector2(12F, 1F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = (IGeometrySource2D)(object)CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1F, 12F));
                    builder.AddLine(new Vector2(-1F, 12F));
                    builder.AddLine(new Vector2(-1F, -12F));
                    builder.AddLine(new Vector2(1F, -12F));
                    builder.AddLine(new Vector2(1F, 12F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = (IGeometrySource2D)(object)CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Opacity for layer: bottom Outlines
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(12.25F, 1.25F);
                result.Offset = new Vector2(3.75F, 25.75F);
                // ShapeGroup: Group 1 Offset:<12.25, 1.25>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "Scale", ScaleVector2Animation(), RootProgress());
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(1.25F, 12.25F);
                // ShapeGroup: Group 1 Offset:<1.25, 12.25>
                result.Shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_45(), _rootProgress);
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape_2()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(1.25F, 12.25F);
                // ShapeGroup: Group 1 Offset:<1.25, 12.25>
                result.Shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_m45(), _rootProgress);
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // Opacity for layer: top — Outlines
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(12.25F, 1.25F);
                result.Offset = new Vector2(3.75F, 3.75F);
                // ShapeGroup: Group 1 Offset:<12.25, 1.25>
                result.Shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "Scale", _scaleVector2Animation, _rootProgress);
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                return _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Opacity for layer: bottom Outlines
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<12.25, 1.25>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 12.25F, 1.25F), ColorBrush_Black());
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<1.25, 12.25>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 1.25F, 12.25F), _colorBrush_Black);
                return result;
            }

            // - Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<1.25, 12.25>
                var geometry = _pathGeometry_1;
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 1.25F, 12.25F), _colorBrush_Black);
                return result;
            }

            // - Opacity for layer: top — Outlines
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<12.25, 1.25>
                var geometry = _pathGeometry_0;
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 12.25F, 1.25F), _colorBrush_Black);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Opacity for layer: bottom Outlines
                children.InsertAtTop(ShapeVisual_0());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_1());
                // Opacity for layer: top — Outlines
                children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0()
            {
                // Frame 0.
                var result = _opacityScalarAnimation_1_to_0 = CreateScalarKeyFrameAnimation(0F, 1F, _stepThenHoldEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.0833333358F, 1F, _holdThenStepEasingFunction);
                // Frame 47.
                result.InsertKeyFrame(0.19583334F, 1F, _cubicBezierEasingFunction_0);
                // Frame 50.
                result.InsertKeyFrame(0.208333328F, 0F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_45()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.0833333358F, 0F, _holdThenStepEasingFunction);
                // Frame 50.
                result.InsertKeyFrame(0.208333328F, 0F, _cubicBezierEasingFunction_0);
                // Frame 80.
                result.InsertKeyFrame(0.333333343F, 45F, _cubicBezierEasingFunction_0);
                return result;
            }

            // - Layer aggregator
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_m45()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.0833333358F, 0F, _holdThenStepEasingFunction);
                // Frame 50.
                result.InsertKeyFrame(0.208333328F, 0F, _cubicBezierEasingFunction_0);
                // Frame 80.
                result.InsertKeyFrame(0.333333343F, -45F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Shape tree root for layer: bottom Outlines
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(32F, 32F);
                result.Shapes.Add(ContainerShape_0());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_1_to_0(), _rootProgress);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(32F, 32F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_1());
                shapes.Add(ContainerShape_2());
                return result;
            }

            // Shape tree root for layer: top — Outlines
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(32F, 32F);
                result.Shapes.Add(ContainerShape_3());
                StartProgressBoundAnimation(result, "Opacity", _opacityScalarAnimation_1_to_0, _rootProgress);
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(25.75F, 3.75F), _stepThenHoldEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.0833333358F, new Vector2(25.75F, 3.75F), _holdThenStepEasingFunction);
                // Frame 50.
                result.InsertKeyFrame(0.208333328F, new Vector2(14.75F, 3.75F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(3.75F, 3.75F), _stepThenHoldEasingFunction);
                // Frame 20.
                result.InsertKeyFrame(0.0833333358F, new Vector2(3.75F, 3.75F), _holdThenStepEasingFunction);
                // Frame 50.
                result.InsertKeyFrame(0.208333328F, new Vector2(14.75F, 3.75F), _cubicBezierEasingFunction_0);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                var result = _scaleVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.0833333358F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 21.
                result.InsertKeyFrame(0.0874999985F, new Vector2(0.89933002F, 1F), CubicBezierEasingFunction_0());
                // Frame 50.
                result.InsertKeyFrame(0.208333328F, new Vector2(0.0799999982F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Testlottie_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(32F, 32F);
            void IDisposable.Dispose() => _root?.Dispose();

        }
    }
}
